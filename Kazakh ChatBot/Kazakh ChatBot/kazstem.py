
kazendings = ['шама', 'шеме', 'шалық', 'шелік', 'дайын', 'дейін', 'тайын', 'тейін', 'мын', 'мін', 'бын', 'бін', 'пын',
              'пін', 'айын', 'ейін', 'мыз', 'міз', 'быз', 'біз', 'пыз', 'піз', 'сың', 'сің',
              'сыңдар', 'сіңдер', 'сыз', 'сіз', 'сыздар', 'сіздер', 'ыңыз',
              'іңіз', 'сы', 'сі', 'дан', 'ден', 'тан', 'тен', 'нан', 'нен', 'да', 'де', 'та', 'те', 'да', "із",
              'де', 'ған', 'ген', 'қан', 'кен', 'ға', 'ге', 'қа', 'ке', 'на', 'не',
              'дың', 'дің', 'тың', 'тiң', 'ның', 'нің', 'ды', 'ді', 'ты', 'ті', 'ны', 'ні', 'ін', 'дікі', 'тікі',
              'нікі', 'ба', 'бе', 'па', 'пе', 'ма', 'ме', 'бен', 'пен', 'мен', 'лы', 'лі',
              'ғы', 'гі', 'қы', 'кі', 'дай', 'дей', 'тай', 'тей', 'дық', 'дік', 'тық', 'тік', 'лық', 'лік', 'паз',
              'ғыш', 'гіш', 'қыш', 'кіш', 'шек', 'шақ', 'шыл', 'шіл', 'нші', 'ншы', 'ау', 'еу', 'дап', 'деп',
              'тап', 'теп', 'лап', 'леп', 'даған', 'деген', 'таған', 'теген', 'лаған', 'леген', 'ла', 'ле',  'дар',
              'дер', 'тар', 'тер', 'лар', 'лер', 'ар', 'ер', 'ғар', 'гер',
              'қар', 'кер', 'дыр', 'дір', 'тыр', 'тір', 'ғыз', 'гіз', 'қыз', 'кіз', 'атын', 'етін',
              'йтын', 'йтін', 'ушы', 'уші', 'ып', 'іп', 'май', 'мей', 'ғалы', 'гелі', 'қалы', 'келі', 'ша', 'ше',
              'лай', 'лей', 'сын', 'сін', 'са', 'се', 'бақ', 'бек', 'пақ', 'пек', 'мақ', 'мек', 'йын', 'йін',
              'йық', 'йік', 'тым', 'тім', 'дым', 'дім',
              'ым', 'ім', 'ім', 'ың', 'ің', 'ын', 'ін', 'ыңыз', 'іңіз', 'дар', 'дер',
              'тар', 'тер', 'лар', 'лер', 'ар', 'ер', 'даc', 'деc', 'таc', 'теc', 'лаc', 'леc',]

rusendings = ['шама', 'шеме', 'шалык', 'шелик', 'дайын', 'дейин', 'тайын', 'тейин', 'мын', 'мин', 'бын', 'бин', 'пын',
              'пин', 'айын', 'ейин', 'мыз', 'миз', 'быз', 'биз', 'пыз', 'пиз', 'сын', 'син',
              'сындар', 'синдер', 'сыз', 'сиз', 'сыздар', 'сиздер', 'ыныз',
              'иниз', 'сы', 'си', 'дан', 'ден', 'тан', 'тен', 'нан', 'нен', 'да', 'де', 'та', 'те', 'да', "из",
              'де', 'ган', 'ген', 'кан', 'кен', 'га', 'ге', 'ка', 'ке', 'на', 'не', 'бак', 'бек', 'пак', 'пек', 'мак',
              'мек',
              'дын', 'дин', 'тын', 'тин', 'нын', 'нин', 'ды', 'ди', 'ты', 'ти', 'ны', 'ни', 'ин', 'дики', 'тики',
              'ники',
              'ба', 'бе', 'па', 'пе', 'ма', 'ме', 'бен', 'пен', 'мен', 'лы', 'ли',
              'гы', 'ги', 'кы', 'ки', 'дай', 'дей', 'тай', 'тей', 'дык', 'дик', 'тык', 'тик', 'лык', 'лик', 'паз',
              'гыш', 'гиш', 'кыш', 'киш', 'шек', 'шак', 'шыл', 'шил', 'нши', 'ншы', 'ау', 'еу', 'дап', 'деп',
              'тап', 'теп', 'лап', 'леп', 'даган', 'деген', 'таган', 'теген', 'лаган', 'леген', 'ла', 'ле', 'даc',
              'деc', 'таc', 'теc', 'лаc', 'леc', 'дар', 'дер',
              'тар', 'тер', 'лар', 'лер', 'ар', 'ер', 'гар', 'гер', 'кар', 'кер', 'дыр', 'дир', 'тыр',
              'тир', 'гыз', 'гиз', 'кыз', 'киз', 'атын', 'етин',
              'йтын', 'йтин', 'ушы', 'уши', 'ып', 'ип', 'май', 'мей', 'галы', 'гели', 'калы', 'кели', 'ша', 'ше',
              'лай', 'лей', 'сын', 'син', 'са',
              'се', 'йын', 'йин', 'йык', 'йик', 'тым', 'тим', 'дым', 'дим', 'ым',
              'им', 'им', 'ын', 'ин', 'ын', 'ин', 'ыныз', 'иниз', 'дар', 'дер',
              'тар', 'тер', 'лар', 'лер', 'ар', 'ер']

# detects input sequence inside the array, used to determine the endings to remove them, one of conditions is that
# the sequence must be at the end
def sequence_detector(sequence, array):
    temp = [(i, i + len(sequence)) for i in range(len(array))
            if array[i:i + len(sequence)] == sequence and (i + len(sequence) == len(array))]
    if temp:
        try:
            return [temp[0][0], temp[0][1]]
        except:
            pass
    else:
        return []

# change kazakh letters to russian
def kaz2rus(word):
    kaz = ["ә", "і", "ң", "ғ", "ү", "ұ", "қ", "ө", "һ"]
    rus = ["а", "и", "н", "г", "у", "у", "к", "о", "х"]
    word = list(word)
    for i in range(len(word)):
        if word[i] in kaz:
            temp = kaz.index(word[i])
            word[i] = rus[temp]
    return ''.join(map(str, word))

# kazakh stem function
def kazstem(word, KazOrRus=1):
    # checks which option is used
    if KazOrRus == 1:
        word = kaz2rus(word)
    vowels = ["а", "ә", "е", "и", "і", "ы", "о", "у", "ү", "ұ", "э", "ю", "я"]
    pre = ""
    # extracts the stem of the word. extracts till the first non-vowel after first vowel
    # friend->frien, hello->hel, hero->he, ғаламторлардың->ғал
    for i in range(len(word) - 1):
        if word[i] in vowels:
            if word[i + 1] in vowels:
                pre = word[:i + 3]
                word = word[i + 3:]
                break
            else:
                pre = word[:i + 2]
                word = word[i + 2:]
                break
    # now the function works with what left, [ғал] {амторлардың} with the part in curly brackets
    # change the letters to the list of bytes utf-8 encoding
    word = list(word.encode())
    if KazOrRus == 1:
        for f in rusendings:
            idx = sequence_detector(list(f.encode()), word)
            if idx:
                del word[idx[0]: idx[1]]
        return pre + bytes(word).decode()
    else:
        for f in kazendings:
            idx = sequence_detector(list(f.encode()), word)
            if idx:
                del word[idx[0]: idx[1]]
        return pre + bytes(word).decode()


